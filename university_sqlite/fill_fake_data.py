import sqlite3from datetime import datetimefrom random import randint, choiceimport fakerfrom create_db import PATH_TO_DBNUMBER_OF_STUDENTS = 30NUMBER_OF_GROUPS = 3NUMBER_OF_SUBJECTS = 5NUMBER_OF_PROFESSORS = 3NUMBER_OF_MARKS = 150def generate_fake_data(    num_students, num_professors, num_groups, num_subjects, num_marks):    fake_students = []    fake_professors = []    fake_subjects = []    fake_groups = []    fake_marks = []    fake_data = faker.Faker()    # Generating 10 different dates for marks    date_start = datetime.strptime("2022-01-01", "%Y-%m-%d")    date_end = datetime.strptime("2022-12-31", "%Y-%m-%d")    random_date = [        fake_data.date_between_dates(date_start=date_start, date_end=date_end)        for _ in range(10)    ]    for _ in range(num_students):        fake_students.append(fake_data.name())    for _ in range(num_professors):        fake_professors.append((fake_data.name(), fake_data.email()))    for _ in range(num_groups):        fake_groups.append(fake_data.job())    for _ in range(num_subjects):        fake_subjects.append(fake_data.job())    for _ in range(num_marks):        fake_marks.append((randint(1, 100), choice(random_date)))    return fake_students, fake_professors, fake_groups, fake_subjects, fake_marksdef prepare_fake_data(    students_data, professors_data, groups, subjects_data, marks_data):    # professors_data and marks_data are tuples from the beginning    for_students = []    for student in students_data:        for_students.append((student,))    for_groups = []    for group in groups:        for_groups.append((group,))    for_subjects = []    for subject in subjects_data:        for_subjects.append((subject,))    return for_students, professors_data, for_groups, for_subjects, marks_datadef insert_data_to_db(    list_of_students,    list_of_professors,    list_of_groups,    list_of_subjects,    list_of_marks,):    with sqlite3.connect(PATH_TO_DB) as conn:        cur = conn.cursor()        sql_to_students = """            INSERT INTO students(name)            VALUES (?)        """        cur.executemany(sql_to_students, list_of_students)        sql_to_professors = """            INSERT INTO professors(name, email)            VALUES(?, ?)        """        cur.executemany(sql_to_professors, list_of_professors)        sql_to_groups = """                INSERT INTO groups_of_students(name)                VALUES (?)                """        cur.executemany(sql_to_groups, list_of_groups)        sql_to_subjects = """                    INSERT INTO subjects(name)                    VALUES (?)                        """        cur.executemany(sql_to_subjects, list_of_subjects)        sql_to_marks = """                    INSERT INTO marks(mark, mark_date)                    VALUES (?, ?)                        """        cur.executemany(sql_to_marks, list_of_marks)        conn.commit()def connect_groups_students():    with sqlite3.connect(PATH_TO_DB) as conn:        cur = conn.cursor()        cur.execute("SELECT id FROM groups_of_students ORDER BY RANDOM()")        ids_tuple_groups = cur.fetchall()  # Taking from given tuple our id        group_ids = [el[0] for el in ids_tuple_groups]        cur.execute("SELECT id FROM students ORDER BY RANDOM()")        ids_tuple_students = cur.fetchall()        students_ids = [el[0] for el in ids_tuple_students]        for group_id in group_ids:            students_in_group = students_ids[:10]            for student_id in students_in_group:                cur.execute(                    "UPDATE students SET group_id = ? WHERE id = ?",                    (group_id, student_id),                )            students_ids = students_ids[10:]        conn.commit()def connect_professors_subjects():    with sqlite3.connect(PATH_TO_DB) as conn:        cur = conn.cursor()        cur.execute("SELECT id FROM professors ORDER BY RANDOM()")        ids_tuple_professors = cur.fetchall()        professors_ids = [el[0] for el in ids_tuple_professors]        cur.execute("SELECT id FROM subjects")        ids_tuple_subjects = cur.fetchall()        subjects_ids = [el[0] for el in ids_tuple_subjects]        for subject_id in subjects_ids:            cur.execute(                "UPDATE subjects SET professor_id = ? WHERE id = ?",                (choice(professors_ids), subject_id),            )        conn.commit()def connect_marks_subjects():    with sqlite3.connect(PATH_TO_DB) as conn:        cur = conn.cursor()        cur.execute("SELECT id FROM students")        ids_tuple_students = cur.fetchall()        students_ids = [el[0] for el in ids_tuple_students]        cur.execute("SELECT name FROM subjects")        names_tuple_subjects = cur.fetchall()        subjects_names = [el[0] for el in names_tuple_subjects]        cur.execute("SELECT id FROM marks")        ids_tuple_marks = cur.fetchall()        marks_ids = [el[0] for el in ids_tuple_marks]        for subject_name in subjects_names:            for student_id in students_ids:                cur.execute(                    "UPDATE marks SET student_id = ?, subject_name = ? WHERE id = ?",                    (student_id, subject_name, marks_ids.pop(0)),                )        conn.commit()def main():    students, professors, groups_of_students, subjects, marks = prepare_fake_data(        *generate_fake_data(            NUMBER_OF_STUDENTS,            NUMBER_OF_PROFESSORS,            NUMBER_OF_GROUPS,            NUMBER_OF_SUBJECTS,            NUMBER_OF_MARKS,        )    )    insert_data_to_db(students, professors, groups_of_students, subjects, marks)    connect_groups_students()    connect_professors_subjects()    connect_marks_subjects()if __name__ == "__main__":    main()